{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<code>django-user-trace</code> <p>A Python logging filter for Django user attributes</p> <p> </p> <p><code>django-user-trace</code> provides a Python logging filter that injects attributes from the currently logged in Django user.</p> <p>It uses a <code>ContextVar</code> to store user attributes for use on the current thread. These are then injected into all log records via a logging filter.</p> <pre><code>sequenceDiagram\n    actor User\n    User -&gt;&gt;+ django: make request\n    django -&gt;&gt;+ django.contrib.auth: AuthenticationMiddleware\n    django.contrib.auth -&gt;&gt;+ django: set `request.user`\n    django -&gt;&gt;+ django_user_trace: django_user_trace_middleware\n    note over django, django_user_trace: Capture relevant user attributes into a `ContextVar`\n    django_user_trace -&gt;&gt;+ django: continue\n    django --&gt; logging: log message\n    logging -&gt;&gt;+ django_user_trace: get user attrs\n    django_user_trace --&gt;&gt; logging: `ContextVar` for user attrs\n    django -&gt;&gt;+ django_user_trace: signal `request_finished`\n    note over django, django_user_trace: Clear user attributes from the `ContextVar`\n    django_user_trace -&gt;&gt;+ django: continue\n    django --&gt;&gt; User: send response</code></pre>"},{"location":"#supports","title":"Supports","text":"<ul> <li>Celery task logging</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Django \u2014 How to configure and use logging</li> </ul>"},{"location":"#related-projects","title":"Related Projects","text":"<ul> <li>madzak/python-json-logger</li> <li>snok/django-guid</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Thank you for considering contributing to <code>django-user-trace</code>! Please see the Contribution Guidelines.</p>"},{"location":"#security-vulnerabilities","title":"Security Vulnerabilities","text":"<p>Please review the Security Policy on how to report security vulnerabilities.</p>"},{"location":"#licence","title":"Licence","text":"<p><code>django-user-trace</code> is open-sourced software licenced under the MIT licence.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#1.1.0","title":"1.1.0 July 02, 2023","text":"<p> Features</p> <ul> <li>celery: add support for tracing Celery tasks (closes #2) (#8) (ad916e7)</li> <li>dispatch signals to enable third-party integrations (closes #4) (#5) (887a131)</li> </ul> <p> Documentation</p> <ul> <li>fix mermaid diagram does not render (fixes #7) (81bcb49)</li> </ul>"},{"location":"changelog/#100-2023-03-28","title":"1.0.0 (2023-03-28)","text":"<p> Features</p> <ul> <li>initial functionality (ab9dfdf)</li> </ul> <p> Documentation</p> <ul> <li>initial documentation (e972a80)</li> </ul> <p> Miscellaneous Chores</p> <ul> <li>main: bump version 1.0.0 (d38356b)</li> </ul>"},{"location":"changelog/how-to-upgrade/","title":"How to upgrade","text":""},{"location":"changelog/how-to-upgrade/#with-pip","title":"with pip recommended","text":"<p><code>django-user-trace</code> can be upgraded from PyPI.</p>  pip poetry <pre><code>pip install -U django-user-trace\n</code></pre> <pre><code>poetry update django-user-trace\n</code></pre> How do I see what version I currently have installed? <p>To see which version of <code>django-user-trace</code> you currently have installed, use:</p>  pip poetry <pre><code>pip show django-user-trace\n</code></pre> <pre><code>poetry show django-user-trace\n</code></pre> <p>Tip</p> <p>It's always recommended to invoke <code>pip install</code> in a Python virtualenv. This will ensure that there are no conflicts with your global Python installation.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#discussions","title":"Discussions","text":"<p>Discussions are a great way to ask for help without undergoing the formalities of opening an issue. You are encouraged to use discussions where appropriate.</p> <ul> <li>With a single question, you show where contributors can improve the user   experience</li> </ul>"},{"location":"contributing/#issues","title":"Issues","text":"<p>Issues are an invaluable asset to the success of this project.</p> <ul> <li>Ideas enable others to make meaningful contributions</li> <li>Problems highlight where this project is lacking</li> <li>Issues can help others debug their problems</li> </ul> <p>Thank you for creating them.</p>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>Pull requests are the best way to get your ideas into this repository's codebase.</p> <p>When deciding to merge a pull request, the following things are taken into account:</p>"},{"location":"contributing/#1-does-it-state-intent","title":"1. Does it state intent","text":"<p>You should be clear with which problem you are trying to solve within your contribution.</p>"},{"location":"contributing/#2-is-it-justified","title":"2. Is it justified","text":"<p>You should justify the way your change solves the problem, i.e. why this change is better. It may also be worth mentioning any alternate solutions considered but discarded.</p>"},{"location":"contributing/#3-is-it-of-quality","title":"3. Is it of quality","text":"<p>There are no grammatical or spelling mistakes - it reads well.</p> <p>Try to make sure your explanation can be understood without external resources.</p> <p>Instead of giving a URL to a discussion, try to summarise the relevant points.</p>"},{"location":"contributing/#branches","title":"Branches","text":"<p>A branch contains commits to be included in an aforementioned pull request.</p>"},{"location":"contributing/#branching-strategy","title":"Branching Strategy","text":"<p>This project follows the GitHub flow - a lightweight, branch-based workflow that supports teams and projects where deployments are made regularly.</p>"},{"location":"contributing/#main","title":"<code>main</code>","text":"<p>At any given time, the latest code that exists in production can be found under the <code>main</code> branch.</p>"},{"location":"contributing/#beta-alpha","title":"<code>beta</code> / <code>alpha</code>","text":"<p>The latest Beta and Alpha releases can be found under the <code>beta</code> and <code>alpha</code> branches respectively. Their corresponding versions contain the <code>-beta</code> or <code>-alpha</code> suffixes.</p>"},{"location":"contributing/#0-90-9xx","title":"<code>+([0-9])?(.{+([0-9]),x}).x</code>","text":"<p>Branches that match the given pattern are for maintenance releases, generally used for patching older versions of the codebase as outlined below.</p>"},{"location":"contributing/#commits","title":"Commits","text":"<p>Many commits may form an aforementioned pull request.</p>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>This project adheres to Conventional Commits - a specification for adding human and machine-readable meaning to commit messages.</p> <p>It is worth noting that your commit messages will be used to build automated changelogs! Hence, code owners may choose to squash your commits in any pull requests to ensure they meet our standards outlined in the aforementioned Conventional Commits.</p>"},{"location":"contributing/#versions","title":"Versions","text":"<p>This project follows the Semantic Versioning specification.</p>"},{"location":"contributing/#major-releases","title":"Major Releases","text":"<p>A new feature or fix may introduce a breaking change, this warrants a new major version. These releases are not backwards compatible.</p>"},{"location":"contributing/#pre-releases","title":"Pre-releases","text":"<p>As new features and breaking changes are developed, we may decide to deploy these only to our most dedicated users to get feedback. These releases are identified by a <code>-beta</code> or <code>-alpha</code> suffix in the version specifier.</p>"},{"location":"contributing/#maintenance-releases","title":"Maintenance Releases","text":"<p>Often, it makes sense to release important patches to older versions so those who cannot update due to strict policies may benefit. To track an older major version, look for its related branch that follows the pattern <code>+([0-9])?(.{+([0-9]),x}).x</code>, e.g. <code>2.x</code>.</p>"},{"location":"contributing/#continuous-integration-deployment-cicd","title":"Continuous Integration &amp; Deployment (CI/CD)","text":"<p>This project uses GitHub Actions in tandem with release-please to automate building, testing and deploying new versions of the codebase.</p>"},{"location":"contributing/#how-it-works","title":"How it works?","text":"<p>When new commits make their way into one of the release branches outlined in the Branching Strategy, a GitHub workflow is triggered. This workflow in turn executes release-please.</p>"},{"location":"contributing/reporting-a-vulnerability/","title":"Reporting a vulnerability","text":"<p>If you discover a security vulnerability within <code>django-user-trace</code>, please send an e-mail to Jonathan Hiles at jonathan@hil.es. All security vulnerabilities will be promptly addressed.</p>"},{"location":"contributing/reporting-a-vulnerability/#public-pgp-key","title":"Public PGP Key","text":"<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEY3oqwxYJKwYBBAHaRw8BAQdAe76/05EDppNm/Q08FX6r5+mcUgJlEC9oLNHS\nP4vCPbK0IEpvbmF0aGFuIEhpbGVzIDxqb25hdGhhbkBoaWwuZXM+iJMEExYKADsW\nIQSbOWcxXiTjScf//vfI56JFuNBSbAUCY3oqwwIbAwULCQgHAgIiAgYVCgkICwIE\nFgIDAQIeBwIXgAAKCRDI56JFuNBSbOa+AP4z8LIGDXqejihfMgkYfB+zcz/UBnt7\neItaSKFw6qcUcwD/TLmoCPhAz4H8slkvIjZMVqK0FZh8s7vTx39gDtrGkgi4MwRj\neizjFgkrBgEEAdpHDwEBB0DXtDp7slHJdjUHXSNRV39kBO/lWe0KfQuuZg9H2K5y\ngIj1BBgWCgAmFiEEmzlnMV4k40nH//73yOeiRbjQUmwFAmN6LOMCGwIFCQHhM4AA\ngQkQyOeiRbjQUmx2IAQZFgoAHRYhBKM8iFN2saHf/2tQih3ZFwLdpcIdBQJjeizj\nAAoJEB3ZFwLdpcIdPCwBAOBIhxKhoS9VF0BdAORxxJ0Ys73xRWlTVihLiKBhJjXC\nAP9Cq0cgHXMhGXcD7AihbGloTfvZI2OnOMqhes36ok7CD77aAP9E7W74VTD7ftQ4\nLIU+r+SMlCrqktdsgRBMtqU4HaKjYAD+JayU/vRtaA2FcwKEfwqm1zHpMeZJBi5p\nQ2xlMZWdRg+4OARjei1zEgorBgEEAZdVAQUBAQdA25uGl4SHXUyMbfVb7vrP3bXg\nbvx2UzWh60sVaJURSVwDAQgHiH4EGBYKACYWIQSbOWcxXiTjScf//vfI56JFuNBS\nbAUCY3otcwIbDAUJAeEzgAAKCRDI56JFuNBSbNoRAP9YSL41Sf7VTnn1day9zY4t\nGI8MzmDQIGvbYc1nJxelBAEAw4SkxNOnuKZ6T4sIV5lO6O/Ec/jey7Dd9K9sSNh9\nfAi4MwRjei2NFgkrBgEEAdpHDwEBB0A00IiMMOyJvPbgtv9GZ7TLOllbSqaCX+9L\nEVq9qIYBTYh+BBgWCgAmFiEEmzlnMV4k40nH//73yOeiRbjQUmwFAmN6LY0CGyAF\nCQHhM4AACgkQyOeiRbjQUmyP+AEA8wfFtsrB7QrLY/HIKFs0T+11eng68FqS7K0G\nI4ij7i8BAITKv52MfLFSmkQGcl+NoQySnyUTHkVl6K1rBc089nkG\n=EUao\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>You can provide settings for <code>django-user-trace</code> by adding <code>DJANGO_USER_TRACE</code> as a dictionary to your Django settings.</p> <p>The default settings are as follows:</p> settings.py<pre><code>DJANGO_USER_TRACE = {\n    \"USER_ATTRS\": {\"username\": \"get_username\"},\n    \"CELERY_TASK_HEADER\": \"User\",\n}\n</code></pre>"},{"location":"getting-started/configuration/#user_attrs","title":"<code>USER_ATTRS</code>","text":"<p> Default: <code>{\"username\": \"get_username\"}</code> Type: <code>dict[str, str | Callable[[AbstractBaseUser | AnonymousUser, HttpRequest], Any]]</code> </p> <p>This option controls which <code>request.user</code> attributes are made available to the log records.</p> <p>It is a mapping of log record field names to either:</p> <ol> <li>an attribute on the Django <code>request.user</code> object;</li> <li>a callable that accepts (<code>AbstractBaseUser</code> |    <code>AnonymousUser</code>, <code>HttpRequest</code>) and    returns the result;</li> <li>an import string (prefixed with <code>ext://</code>) to a callable as seen in (2) above.</li> </ol> <p>Tip</p> <p>To lookup nested attributes, separate them by <code>__</code> (two underscores), e.g. <code>profile__country__code</code>.</p> settings.py<pre><code>def get_custom_attribute(user, request):\n    return f\"Mr. {user.get_short_name()}\"\n\nDJANGO_USER_TRACE = {\n    # ...\n    \"USER_ATTRS\": {\n        \"email\": \"email\",#(1)!\n        \"username\": \"get_username\",#(2)!\n        \"custom\": get_custom_attribute,#(3)!\n        \"custom_2\": \"ext://settings.get_custom_attribute\",#(4)!\n    },\n}\n</code></pre> <ol> <li>Here, we are configuring the <code>USER_ATTRS</code> option of <code>django-user-trace</code> to    map <code>request.user.email</code> to the <code>username</code> field on a    log record.</li> <li>Here, we are mapping the result of invoking the    <code>get_username()</code> method on the    <code>request.user</code> instance, to the <code>username</code> field on a    log record.</li> <li>Here, we are mapping the result of invoking the <code>get_custom_attribute</code>    callable (defined above) to the <code>custom</code> field on a log record.</li> <li>Here is another way of invoking the same <code>get_custom_attribute</code> callable    (defined above) by first importing the callable from    <code>settings.get_custom_attribute</code>.</li> </ol>"},{"location":"getting-started/configuration/#celery_task_header","title":"<code>CELERY_TASK_HEADER</code>","text":"<p> Default: <code>\"User\"</code> Type: <code>str</code> </p> <p>This option determines the name of the Celery task header used to trace user attributes when <code>django_user_trace.contrib.celery</code> integration is installed.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#with-pip","title":"with pip recommended","text":"<p><code>django-user-trace</code> can be installed from PyPI.</p>  pip poetry <pre><code>pip install django-user-trace\n</code></pre> <pre><code>poetry add django-user-trace\n</code></pre>"},{"location":"getting-started/installation/#with-git","title":"with git","text":"<p>You can also build and install <code>django-user-trace</code> from its source.</p> <pre><code>git clone https://github.com/axieum/django-user-trace.git\ncd django-user-trace\npip install -e .\n</code></pre> <p>Tip</p> <p>It's always recommended to invoke <code>pip install</code> in a Python virtualenv. This will ensure that there are no conflicts with your global Python installation.</p>"},{"location":"getting-started/setup/","title":"Setup","text":""},{"location":"getting-started/setup/#1-installed-apps","title":"1. Installed apps","text":"<p>Add <code>django_user_trace</code> to your <code>INSTALLED_APPS</code> Django setting:</p> <pre><code>INSTALLED_APPS = [\n  # ...\n  \"django_user_trace\",  # https://github.com/axieum/django-user-trace\n]\n</code></pre>"},{"location":"getting-started/setup/#2-middleware","title":"2. Middleware","text":"<p>Add <code>django_user_trace.middleware.django_user_trace_middleware</code> to your <code>MIDDLEWARE</code> Django setting:</p> <pre><code>MIDDLEWARE = [\n    # ...\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",#(1)!\n    \"django_user_trace.middleware.django_user_trace_middleware\",\n    # ...\n]\n</code></pre> <ol> <li> <code>django-user-trace</code> uses middleware to capture user    attributes from each request's <code>request.user</code>    attribute. To do this, the middleware must be placed after Django's    <code>AuthenticationMiddleware</code>!</li> </ol>"},{"location":"getting-started/setup/#3-logging","title":"3. Logging","text":"<p>Add <code>django_user_trace.log.DjangoUserAttrs</code> as a filter to your <code>LOGGING</code> Django setting, apply the filter to handler/s, and add the new <code>username</code> field to any formatters:</p> <pre><code>LOGGING = {\n    # ...\n    \"filters\": {\n        # ...\n        \"user_attrs\": {\"()\": \"django_user_trace.log.DjangoUserAttrs\"},#(1)!\n    },\n    \"formatters\": {\n        # ...\n        \"verbose\": {\n            \"format\": \"%(levelname)s %(asctime)s %(username)s %(message)s\",#(2)!\n        },\n    },\n    \"handlers\": {\n        # ...\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"verbose\",\n            \"filters\": [\"user_attrs\"],#(3)!\n        },\n    },\n}\n</code></pre> <ol> <li>This Python logging filter injects any configured user    attributes to every log record.</li> <li>Add any configured user attributes here, <code>username</code> is available by default.</li> <li>We apply the new <code>user_attrs</code> filter that we defined above here.</li> </ol>"},{"location":"getting-started/setup/#31-internal-logs","title":"3.1 Internal logs optional","text":"<p>To view internal logs made by <code>django-user-trace</code> for debugging purposes, add the <code>django_user_trace</code> logger to your <code>LOGGING</code> Django setting:</p> <pre><code>LOGGING = {\n    # ...\n    \"loggers\": {\n        \"django_user_trace\": {\n            \"handlers\": [\"console\"],\n            \"level\": \"WARNING\",#(1)!\n            \"propagate\": False,\n        },\n    },\n}\n</code></pre> <ol> <li> It's recommended to not log any lower than <code>WARNING</code> in production,    as doing so will lead to extra log messages per request \u2014 these add    up over time.</li> </ol>"},{"location":"integrations/","title":"Integrations","text":"<p>An integration is an optional extension to the <code>django-user-trace</code> functionality.</p> <p>Here are a list of available integrations:</p> <ul> <li>Celery</li> </ul>"},{"location":"integrations/#writing-your-own-integration","title":"Writing your own integration","text":""},{"location":"integrations/#user-context","title":"User Context","text":"<p>You can access the <code>ContextVar</code> used to store user attributes on the current thread from <code>django_user_trace.context.user_attrs</code>.</p>"},{"location":"integrations/#signals","title":"Signals","text":""},{"location":"integrations/#django_user_tracesignalsprocess_request","title":"<code>django_user_trace.signals.process_request</code>","text":"<p>Signaled before the view is called, during the <code>django-user-trace</code> middleware.</p> <p> request: <code>HttpRequest</code> \u2014 the Django HTTP request </p>"},{"location":"integrations/#django_user_tracesignalscleanup_request","title":"<code>django_user_trace.signals.cleanup_request</code>","text":"<p>Signaled after the view has been called, during the <code>django-user-trace</code> middleware.</p> <p> request: <code>HttpRequest</code> \u2014 the Django HTTP request </p>"},{"location":"integrations/celery/","title":"Celery","text":""},{"location":"integrations/celery/#1-installed-apps","title":"1. Installed apps","text":"<p>Add <code>django_user_trace.contrib.celery</code> alongside <code>celery</code> to your <code>INSTALLED_APPS</code> Django setting:</p> <pre><code>INSTALLED_APPS = [\n  # ...\n  \"celery\",\n  \"django_user_trace\",  # https://github.com/axieum/django-user-trace\n  \"django_user_trace.contrib.celery\",#(1)!\n]\n</code></pre> <ol> <li>The Django app will register receivers against Celery's    signals. It will copy the captured user context into new task's headers.</li> </ol>"}]}